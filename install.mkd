# Docker

install docker:
```sh
sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc
echo   "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
$(. /etc/os-release && echo "$VERSION_CODENAME") stable" |   sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
```

## startup

```console
docker compose build
docker compose run --remove-orphans  ros_container bash
```


## Starting ros2 package

```sh
. /opt/ros/jazzy/setup.bash
colcon build --symlink-install --packages-select <<package_name>>
. install/setup.bash
```

Create package:

```sh
ros2 pkg create --build-type ament_python --license Apache-2.0 modelidar --dependencies rclpy
```


Check URDF Model
```sh
xacro src/modelidar/urdf/wild_thumper.urdf.xacro  |check_urdf -
```

Display URDF model

```sh
ros2 launch urdf_tutorial display.launch.py model:=/home/theseus/ws/src/modelidar/urdf/wild_thumper.urdf.xacro 
```
or
```sh
ros2 launch modelidar view_robot.launch.py
```


## Example excution

```sh
rviz2 -d src/modelidar/urdf/wild_thumper.rviz 
ros2 launch modelidar demo_launch.py
```
this example use the mock state publisher define in `modelidar/mock_state_publisher.py`


## control startup:
```sh
ros2 launch modelidar view_robot.launch.py
ros2 run controller_manager ros2_control_node
```

## start with teleop_twist_keyboard
```sh
ros2 launch modelidar modelidar.launch.py use_mock_hardware:=true
ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args --params-file install/modelidar/share/modelidar/config/teleop.yaml
```
(needed for stamped twist messages)


## Foxglove
```sh
sudo apt install ros-$ROS_DISTRO-foxglove-bridge
ros2 launch foxglove_bridge foxglove_bridge_launch.xml
```


Docker container use its own ipc and pid. First process in the container will be started with pid=1.

ROS2 use IPC to comunicate between node on the same host, and pid help to differentiate nodes. 

Thus, for executing 2 nodes in 2 different container on the same host, and continue to be visible on network, it's needed to add:
```yaml
services:
  ipc: "host"
  pid: "host"
  network_mode: "host"
```

ROS2, by default use multicast to discover other nodes on other hosts. It's does'nt work very well with previous config, and it's worst on a wifi network. That's why, a solution can be!
```yaml
services:
  build:
    environment:
      ROS_AUTOMATIC_DISCOVERY_RANGE: LOCALHOST
```
This will block multicast request.
To contact other host in this case, it's needed to add `ROS_STATIC_PEERS` in environment


### Deploy with RT kernel

```sh
sudo addgroup realtime
sudo usermod -a -G realtime $(whoami)
```

Add in `/etc/security/limits.conf`:
```
@realtime soft rtprio 99
@realtime soft priority 99
@realtime soft memlock unlimited
@realtime hard rtprio 99
@realtime hard priority 99
@realtime hard memlock unlimited
```


sudo adduser pi docker
docker compose -f .devcontainer/docker-compose.modelibot.yaml build
docker compose -f .devcontainer/docker-compose.modelibot.yaml up
```

